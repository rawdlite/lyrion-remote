#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
import logging
import tomllib
import argparse, textwrap
import os
from lyrionRemote.lmscommander import LMServer,LMPlayer,PlayerCommands
from pathlib import Path
from argparse import ArgumentParser
logger = logging.getLogger(__name__)
      
                
def main():
    LOGLEVEL = {
        0: logging.WARNING,
        1: logging.INFO,
        2: logging.DEBUG
    }
    cmdhelpstr = "\n".join([f"{key}: {PlayerCommands[key]}" for key in PlayerCommands.keys()])
    with open(os.path.join(Path.home(),".config","lyrion-remote","config.toml"), mode="rb") as fp:
        settings = tomllib.load(fp)
    server_id = settings.get('general',{}).get('server')
    player_id = settings['general']['player']
    debug = settings.get('general',{}).get('debug')
    parser = ArgumentParser(description="Interact with Logitech Media Server",
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('cmd', help=cmdhelpstr)
    parser.add_argument("-v", "--verbose", action='count', default=0,
                    help="increase output verbosity")
    parser.add_argument("-s", "--server", dest="server", default=server_id)
    parser.add_argument("-p", "--player", dest="player", default=player_id)
    parser.add_argument("tracks", nargs="*", help='files or url')
    args = parser.parse_args()
    if not LOGLEVEL.get(args.verbose):
        print("invalid loglevel")
        exit(1)
    logging.basicConfig(format='%(asctime)s %(message)s',
                        level=LOGLEVEL[args.verbose])
    if debug or args.verbose == 2:
        fh = logging.FileHandler('/var/log/lmscommand.log')
        fh.setLevel(logging.DEBUG)
        logger.addHandler(fh)
    
    player_id = args.player
    server = LMServer(host=server_id)
    server.update()
    my_player = LMPlayer(server.get_player(player_id))
    logger.info(f"player: {my_player}\nargs: {args.cmd}\n tracks: {args.tracks}")
    if args.cmd == 'info':
        print(my_player)
    elif args.cmd == 'get_players':
        for player in server.players:
            print(player.name)
        
    else:
        getattr(my_player, args.cmd)(args.tracks)
    exit(0)

if __name__ == '__main__':
   main()
